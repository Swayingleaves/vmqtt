syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.vmqtt.common.grpc.cluster";
option java_outer_classname = "ClusterServiceProto";

package vmqtt.cluster;

import "google/protobuf/timestamp.proto";

// 集群管理服务
service ClusterManagementService {
  // 选举领导者
  rpc ElectLeader(ElectLeaderRequest) returns (ElectLeaderResponse);
  
  // 投票
  rpc Vote(VoteRequest) returns (VoteResponse);
  
  // 心跳
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // 日志复制
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  
  // 安装快照
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
  
  // 集群配置变更
  rpc ChangeConfiguration(ChangeConfigurationRequest) returns (ChangeConfigurationResponse);
}

// 服务发现服务
service ServiceDiscoveryService {
  // 注册服务
  rpc RegisterService(RegisterServiceRequest) returns (RegisterServiceResponse);
  
  // 注销服务
  rpc UnregisterService(UnregisterServiceRequest) returns (UnregisterServiceResponse);
  
  // 发现服务
  rpc DiscoverServices(DiscoverServicesRequest) returns (DiscoverServicesResponse);
  
  // 健康检查
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // 服务状态通知
  rpc NotifyServiceStatus(NotifyServiceStatusRequest) returns (NotifyServiceStatusResponse);
}

// 负载均衡服务
service LoadBalancingService {
  // 获取负载信息
  rpc GetLoadInfo(GetLoadInfoRequest) returns (GetLoadInfoResponse);
  
  // 选择节点
  rpc SelectNode(SelectNodeRequest) returns (SelectNodeResponse);
  
  // 更新负载信息
  rpc UpdateLoadInfo(UpdateLoadInfoRequest) returns (UpdateLoadInfoResponse);
  
  // 节点权重调整
  rpc AdjustNodeWeight(AdjustNodeWeightRequest) returns (AdjustNodeWeightResponse);
}

// 集群订阅管理服务
service ClusterSubscriptionService {
  // 同步订阅信息
  rpc SyncSubscription(SyncSubscriptionRequest) returns (SyncSubscriptionResponse);
  
  // 广播订阅变更
  rpc BroadcastSubscriptionChange(BroadcastSubscriptionChangeRequest) returns (BroadcastSubscriptionChangeResponse);
  
  // 查询订阅信息
  rpc QuerySubscriptions(QuerySubscriptionsRequest) returns (QuerySubscriptionsResponse);
  
  // Gossip订阅信息传播
  rpc GossipSubscriptionInfo(GossipSubscriptionInfoRequest) returns (GossipSubscriptionInfoResponse);
  
  // 订阅冲突解决
  rpc ResolveSubscriptionConflict(ResolveSubscriptionConflictRequest) returns (ResolveSubscriptionConflictResponse);
}

// 集群消息路由服务
service ClusterMessageRoutingService {
  // 路由消息到目标节点
  rpc RouteMessage(RouteMessageRequest) returns (RouteMessageResponse);
  
  // 批量路由消息
  rpc BatchRouteMessage(BatchRouteMessageRequest) returns (BatchRouteMessageResponse);
  
  // 查询订阅者分布
  rpc QuerySubscriberDistribution(QuerySubscriberDistributionRequest) returns (QuerySubscriberDistributionResponse);
  
  // 跨节点消息分发
  rpc DistributeMessage(DistributeMessageRequest) returns (DistributeMessageResponse);
}

// 选举相关消息
message ElectLeaderRequest {
  string candidate_id = 1;
  int64 term = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

message ElectLeaderResponse {
  bool vote_granted = 1;
  int64 term = 2;
  string error_message = 3;
}

message VoteRequest {
  string candidate_id = 1;
  int64 term = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

message VoteResponse {
  bool vote_granted = 1;
  int64 term = 2;
}

message HeartbeatRequest {
  string leader_id = 1;
  int64 term = 2;
  int64 prev_log_index = 3;
  int64 prev_log_term = 4;
  int64 leader_commit = 5;
  repeated LogEntry entries = 6;
}

message HeartbeatResponse {
  bool success = 1;
  int64 term = 2;
  int64 last_log_index = 3;
}

message AppendEntriesRequest {
  string leader_id = 1;
  int64 term = 2;
  int64 prev_log_index = 3;
  int64 prev_log_term = 4;
  int64 leader_commit = 5;
  repeated LogEntry entries = 6;
}

message AppendEntriesResponse {
  bool success = 1;
  int64 term = 2;
  int64 last_log_index = 3;
  string error_message = 4;
}

message InstallSnapshotRequest {
  string leader_id = 1;
  int64 term = 2;
  int64 last_included_index = 3;
  int64 last_included_term = 4;
  int64 offset = 5;
  bytes data = 6;
  bool done = 7;
}

message InstallSnapshotResponse {
  bool success = 1;
  int64 term = 2;
  string error_message = 3;
}

message ChangeConfigurationRequest {
  string leader_id = 1;
  int64 term = 2;
  ClusterConfiguration new_configuration = 3;
  ConfigurationChangeType change_type = 4;
}

message ChangeConfigurationResponse {
  bool success = 1;
  string error_message = 2;
  ClusterConfiguration current_configuration = 3;
}

// 服务发现相关消息
message RegisterServiceRequest {
  ServiceInfo service_info = 1;
  int32 ttl_seconds = 2;
}

message RegisterServiceResponse {
  bool success = 1;
  string error_message = 2;
  string service_id = 3;
}

message UnregisterServiceRequest {
  string service_id = 1;
}

message UnregisterServiceResponse {
  bool success = 1;
  string error_message = 2;
}

message DiscoverServicesRequest {
  string service_name = 1;
  string service_version = 2;
  map<string, string> tags = 3;
}

message DiscoverServicesResponse {
  bool success = 1;
  string error_message = 2;
  repeated ServiceInfo services = 3;
}

message HealthCheckRequest {
  string service_id = 1;
}

message HealthCheckResponse {
  bool healthy = 1;
  HealthStatus status = 2;
  string message = 3;
  map<string, string> details = 4;
}

message NotifyServiceStatusRequest {
  string service_id = 1;
  ServiceStatus status = 2;
  string reason = 3;
}

message NotifyServiceStatusResponse {
  bool success = 1;
  string error_message = 2;
}

// 负载均衡相关消息
message GetLoadInfoRequest {
  string node_id = 1;
}

message GetLoadInfoResponse {
  bool success = 1;
  string error_message = 2;
  LoadInfo load_info = 3;
}

message SelectNodeRequest {
  string service_name = 1;
  LoadBalanceStrategy strategy = 2;
  map<string, string> criteria = 3;
}

message SelectNodeResponse {
  bool success = 1;
  string error_message = 2;
  ServiceInfo selected_service = 3;
}

message UpdateLoadInfoRequest {
  string node_id = 1;
  LoadInfo load_info = 2;
}

message UpdateLoadInfoResponse {
  bool success = 1;
  string error_message = 2;
}

message AdjustNodeWeightRequest {
  string node_id = 1;
  int32 new_weight = 2;
  string reason = 3;
}

message AdjustNodeWeightResponse {
  bool success = 1;
  string error_message = 2;
  int32 current_weight = 3;
}

// 数据模型定义
message LogEntry {
  int64 index = 1;
  int64 term = 2;
  LogEntryType type = 3;
  bytes data = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message ClusterConfiguration {
  repeated NodeConfiguration nodes = 1;
  int64 configuration_index = 2;
  google.protobuf.Timestamp created_at = 3;
}

message NodeConfiguration {
  string node_id = 1;
  string node_address = 2;
  int32 node_port = 3;
  NodeRole role = 4;
  NodeState state = 5;
  int32 weight = 6;
}

message ServiceInfo {
  string service_id = 1;
  string service_name = 2;
  string service_version = 3;
  string node_id = 4;
  string address = 5;
  int32 port = 6;
  map<string, string> metadata = 7;
  map<string, string> tags = 8;
  google.protobuf.Timestamp registered_at = 9;
  HealthStatus health_status = 10;
}

message LoadInfo {
  string node_id = 1;
  double cpu_usage = 2;
  double memory_usage = 3;
  double disk_usage = 4;
  double network_usage = 5;
  int64 connection_count = 6;
  int64 message_rate = 7;
  double response_time = 8;
  int32 active_threads = 9;
  google.protobuf.Timestamp updated_at = 10;
}

// 枚举定义
enum NodeRole {
  UNKNOWN_ROLE = 0;
  FRONTEND_NODE = 1;
  BACKEND_NODE = 2;
  COORDINATOR_NODE = 3;
  LOAD_BALANCER = 4;
}

enum NodeState {
  UNKNOWN_STATE = 0;
  INITIALIZING = 1;
  RUNNING = 2;
  STOPPING = 3;
  STOPPED = 4;
  FAILED = 5;
}

enum LogEntryType {
  UNKNOWN_TYPE = 0;
  CONFIGURATION_CHANGE = 1;
  DATA_OPERATION = 2;
  SNAPSHOT = 3;
  NO_OP = 4;
}

enum ConfigurationChangeType {
  ADD_NODE = 0;
  REMOVE_NODE = 1;
  UPDATE_NODE = 2;
  REPLACE_CONFIGURATION = 3;
}

enum ServiceStatus {
  UNKNOWN_STATUS = 0;
  STARTING = 1;
  RUNNING_STATUS = 2;
  STOPPING_STATUS = 3;
  STOPPED_STATUS = 4;
  ERROR = 5;
}

enum HealthStatus {
  UNKNOWN_HEALTH = 0;
  HEALTHY = 1;
  UNHEALTHY = 2;
  WARNING = 3;
  CRITICAL = 4;
}

enum LoadBalanceStrategy {
  ROUND_ROBIN = 0;
  LEAST_CONNECTIONS = 1;
  WEIGHTED_ROUND_ROBIN = 2;
  CONSISTENT_HASH = 3;
  RANDOM = 4;
  LEAST_RESPONSE_TIME = 5;
}

// 集群订阅管理相关消息
message SyncSubscriptionRequest {
  string node_id = 1;
  repeated ClusterSubscriptionInfo subscriptions = 2;
  int64 version = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message SyncSubscriptionResponse {
  bool success = 1;
  string error_message = 2;
  repeated ClusterSubscriptionInfo updated_subscriptions = 3;
  int64 current_version = 4;
}

message BroadcastSubscriptionChangeRequest {
  string node_id = 1;
  SubscriptionChangeEvent event = 2;
  int64 sequence_number = 3;
}

message BroadcastSubscriptionChangeResponse {
  bool success = 1;
  string error_message = 2;
}

message QuerySubscriptionsRequest {
  string topic_filter = 1;
  string node_id = 2;
  bool include_shared_subscriptions = 3;
}

message QuerySubscriptionsResponse {
  bool success = 1;
  string error_message = 2;
  repeated ClusterSubscriptionInfo subscriptions = 3;
}

message GossipSubscriptionInfoRequest {
  string node_id = 1;
  repeated GossipSubscriptionEntry gossip_data = 2;
  int32 gossip_round = 3;
}

message GossipSubscriptionInfoResponse {
  bool success = 1;
  string error_message = 2;
  repeated GossipSubscriptionEntry response_data = 3;
}

message ResolveSubscriptionConflictRequest {
  string node_id = 1;
  repeated ConflictingSubscription conflicts = 2;
}

message ResolveSubscriptionConflictResponse {
  bool success = 1;
  string error_message = 2;
  repeated ClusterSubscriptionInfo resolved_subscriptions = 3;
}

// 集群消息路由相关消息
message RouteMessageRequest {
  string source_node_id = 1;
  string target_node_id = 2;
  ClusterMessage message = 3;
  RoutingMetadata routing_metadata = 4;
}

message RouteMessageResponse {
  bool success = 1;
  string error_message = 2;
  RoutingResult routing_result = 3;
}

message BatchRouteMessageRequest {
  string source_node_id = 1;
  repeated RouteMessageRequest messages = 2;
}

message BatchRouteMessageResponse {
  bool success = 1;
  string error_message = 2;
  repeated RouteMessageResponse results = 3;
}

message QuerySubscriberDistributionRequest {
  string topic = 1;
  bool include_shared_subscriptions = 2;
}

message QuerySubscriberDistributionResponse {
  bool success = 1;
  string error_message = 2;
  repeated NodeSubscriberInfo node_subscribers = 3;
}

message DistributeMessageRequest {
  string source_node_id = 1;
  ClusterMessage message = 2;
  repeated string target_nodes = 3;
  DistributionStrategy strategy = 4;
}

message DistributeMessageResponse {
  bool success = 1;
  string error_message = 2;
  map<string, bool> node_results = 3;
}

// 数据模型定义
message ClusterSubscriptionInfo {
  string subscription_id = 1;
  string client_id = 2;
  string node_id = 3;
  string topic_filter = 4;
  int32 qos = 5;
  bool shared_subscription = 6;
  string share_group = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
  int64 version = 10;
  SubscriptionStatus status = 11;
}

message SubscriptionChangeEvent {
  string subscription_id = 1;
  string client_id = 2;
  string node_id = 3;
  string topic_filter = 4;
  ChangeEventType event_type = 5;
  google.protobuf.Timestamp timestamp = 6;
  int64 sequence_number = 7;
}

message GossipSubscriptionEntry {
  string node_id = 1;
  string subscription_data = 2;
  int64 version = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message ConflictingSubscription {
  string subscription_id = 1;
  repeated ClusterSubscriptionInfo conflicting_versions = 2;
  ConflictType conflict_type = 3;
}

message ClusterMessage {
  string message_id = 1;
  string client_id = 2;
  string topic = 3;
  bytes payload = 4;
  int32 qos = 5;
  bool retain = 6;
  google.protobuf.Timestamp timestamp = 7;
  map<string, string> properties = 8;
}

message RoutingMetadata {
  string message_id = 1;
  string source_node = 2;
  repeated string target_nodes = 3;
  int32 hop_count = 4;
  google.protobuf.Timestamp routing_timestamp = 5;
  map<string, string> routing_properties = 6;
}

message RoutingResult {
  string message_id = 1;
  bool delivered = 2;
  int32 subscriber_count = 3;
  double routing_latency_ms = 4;
}

message NodeSubscriberInfo {
  string node_id = 1;
  int32 subscriber_count = 2;
  repeated string client_ids = 3;
  double node_load = 4;
}

// 枚举定义
enum SubscriptionStatus {
  SUBSCRIPTION_UNKNOWN = 0;
  SUBSCRIPTION_ACTIVE = 1;
  SUBSCRIPTION_INACTIVE = 2;
  SUBSCRIPTION_EXPIRED = 3;
}

enum ChangeEventType {
  EVENT_UNKNOWN = 0;
  SUBSCRIPTION_ADDED = 1;
  SUBSCRIPTION_REMOVED = 2;
  SUBSCRIPTION_UPDATED = 3;
}

enum ConflictType {
  CONFLICT_UNKNOWN = 0;
  VERSION_CONFLICT = 1;
  DUPLICATE_SUBSCRIPTION = 2;
  NODE_CONFLICT = 3;
}

enum DistributionStrategy {
  DISTRIBUTION_BROADCAST = 0;
  DISTRIBUTION_SELECTIVE = 1;
  DISTRIBUTION_LOAD_BALANCED = 2;
}